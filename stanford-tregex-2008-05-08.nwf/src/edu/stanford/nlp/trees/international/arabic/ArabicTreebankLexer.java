/* The following code was generated by JFlex 1.4.1 on 5/8/08 1:17 PM */

package edu.stanford.nlp.trees.international.arabic;

import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

/**
 * A lexer for the Arabic Treebank.  Main thing it does is ignore
 * comments, which are single lines starting ";;"
 * @author Anna Rafferty
 */


class ArabicTreebankLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DATETIME = 3;
  public static final int DATEINHEADER = 6;
  public static final int HEADER = 5;
  public static final int PREAMBLE = 7;
  public static final int DOCNO = 1;
  public static final int SRCID = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 8;
  public static final int DOCTYPE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\26\1\27\1\27\1\25\22\0\1\30\2\0\1\0"+
    "\1\0\1\0\1\32\1\0\1\31\1\31\2\32\1\32\1\32\1\32"+
    "\1\10\13\32\1\24\1\1\1\32\1\2\1\0\1\0\1\5\1\22"+
    "\1\12\1\6\1\4\2\32\1\3\1\14\2\32\1\23\1\20\1\13"+
    "\1\11\1\17\1\32\1\7\1\21\1\15\4\32\1\16\1\32\5\0"+
    "\1\0\32\32\3\0\1\0\6\0\1\27\33\0\37\0\u1f40\0\50\0"+
    "\1\27\1\27\106\0\u0490\0\200\0\uda80\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\3\2\3\3\1\2\1\3\10\4\2\5"+
    "\4\2\1\6\10\0\5\2\10\0\5\2\10\0\7\2"+
    "\10\0\1\2\1\7\5\2\4\0\1\10\4\0\2\2"+
    "\1\11\2\2\1\12\2\0\1\13\3\0\1\14\2\0"+
    "\1\15\3\2\1\16\5\0\1\2\1\17\1\2\5\0"+
    "\1\2\1\20\1\21\6\0\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\363\0\u017a"+
    "\0\363\0\u0195\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237"+
    "\0\u0252\0\363\0\u026d\0\u0195\0\u0288\0\u02a3\0\u02be\0\u02d9"+
    "\0\u0129\0\u02f4\0\u030f\0\u032a\0\u0345\0\u0360\0\u037b\0\u0396"+
    "\0\u03b1\0\u03cc\0\u03e7\0\u0402\0\u041d\0\u0438\0\u0453\0\u046e"+
    "\0\u0489\0\u04a4\0\u04bf\0\u04da\0\u04f5\0\u0510\0\u052b\0\u0546"+
    "\0\u0561\0\u057c\0\u0597\0\u05b2\0\u05cd\0\u05e8\0\u0603\0\u061e"+
    "\0\u0639\0\u0654\0\u066f\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6"+
    "\0\u0711\0\u072c\0\u0747\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce"+
    "\0\u07e9\0\u0804\0\u081f\0\363\0\u083a\0\u0855\0\u0870\0\u088b"+
    "\0\u08a6\0\u08c1\0\u08dc\0\u08f7\0\u0912\0\363\0\u092d\0\u0948"+
    "\0\u0963\0\u097e\0\u0999\0\u09b4\0\363\0\u09cf\0\u09ea\0\363"+
    "\0\u0a05\0\u0a20\0\363\0\u0a3b\0\u0a56\0\u0a71\0\363\0\u0a8c"+
    "\0\u0aa7\0\363\0\u0ac2\0\u0add\0\u0af8\0\363\0\u0b13\0\u0b2e"+
    "\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a\0\363\0\u0bb5\0\u0bd0\0\u0beb"+
    "\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\363\0\363\0\u0c72\0\u0c8d"+
    "\0\u0ca8\0\u0cc3\0\u0cde\0\u0cf9\0\363";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\12\21\14\1\15\1\16\2\17\1\20"+
    "\1\21\1\14\1\22\1\23\32\22\1\24\32\22\1\25"+
    "\32\22\1\26\32\22\1\27\32\22\1\30\32\22\1\31"+
    "\32\22\1\32\23\22\1\33\2\34\3\22\34\0\1\14"+
    "\1\0\1\35\2\14\1\36\10\14\1\37\1\14\1\40"+
    "\3\14\5\0\1\14\1\0\1\14\1\0\22\14\5\0"+
    "\1\14\1\0\1\14\1\0\21\14\1\41\5\0\1\14"+
    "\26\0\1\17\34\0\1\20\2\0\1\22\1\0\31\22"+
    "\10\0\1\42\32\0\1\43\32\0\1\44\32\0\1\45"+
    "\30\0\1\46\1\0\1\47\32\0\1\50\32\0\1\51"+
    "\22\0\1\22\1\0\24\22\1\34\4\22\1\0\1\14"+
    "\1\0\1\14\1\52\20\14\5\0\1\14\1\0\1\14"+
    "\1\0\2\14\1\53\3\14\1\54\13\14\5\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\55\15\14\5\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\56\15\14\5\0\1\14"+
    "\6\0\1\57\32\0\1\60\32\0\1\61\45\0\1\62"+
    "\16\0\1\63\30\0\1\64\35\0\1\65\43\0\1\66"+
    "\14\0\1\14\1\0\2\14\1\67\17\14\5\0\1\14"+
    "\1\0\1\14\1\0\12\14\1\70\7\14\5\0\1\14"+
    "\1\0\1\14\1\0\7\14\1\71\12\14\5\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\72\20\14\5\0\1\14"+
    "\1\0\1\14\1\0\7\14\1\73\12\14\5\0\1\14"+
    "\11\0\1\74\32\0\1\75\26\0\1\76\34\0\1\77"+
    "\40\0\1\100\21\0\1\101\33\0\1\102\34\0\1\103"+
    "\24\0\1\14\1\0\3\14\1\104\16\14\5\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\105\20\14\5\0\1\14"+
    "\1\0\1\14\1\0\10\14\1\106\1\107\1\110\7\14"+
    "\5\0\1\14\1\0\1\14\1\0\2\14\1\111\17\14"+
    "\5\0\1\14\1\0\1\14\1\0\11\14\1\112\10\14"+
    "\5\0\1\14\12\0\1\113\32\0\1\114\35\0\1\115"+
    "\27\0\1\116\24\0\1\117\33\0\1\120\42\0\1\121"+
    "\21\0\1\122\27\0\1\14\1\0\1\14\1\123\20\14"+
    "\5\0\1\14\1\0\1\14\1\124\5\14\1\125\14\14"+
    "\5\0\1\14\1\0\1\14\1\0\6\14\1\126\13\14"+
    "\5\0\1\14\1\0\1\14\1\0\3\14\1\126\16\14"+
    "\5\0\1\14\1\0\1\14\1\0\13\14\1\127\6\14"+
    "\5\0\1\14\1\0\1\14\1\0\15\14\1\130\4\14"+
    "\5\0\1\14\1\0\1\14\1\0\3\14\1\131\16\14"+
    "\5\0\1\14\13\0\1\132\1\133\33\0\1\134\21\0"+
    "\1\135\42\0\1\133\20\0\1\136\5\0\1\137\30\0"+
    "\1\140\30\0\1\141\33\0\1\142\26\0\1\14\1\0"+
    "\4\14\1\143\15\14\5\0\1\14\1\0\1\14\1\0"+
    "\12\14\1\144\7\14\5\0\1\14\1\0\1\14\1\145"+
    "\22\14\5\0\1\14\1\0\1\14\1\0\14\14\1\146"+
    "\5\14\5\0\1\14\1\0\1\14\1\0\17\14\1\147"+
    "\2\14\5\0\1\14\1\0\1\14\1\150\22\14\5\0"+
    "\1\14\11\0\1\151\27\0\1\151\42\0\1\152\16\0"+
    "\1\153\5\0\1\154\37\0\1\155\21\0\1\156\30\0"+
    "\1\157\5\0\1\160\42\0\1\161\13\0\1\14\1\162"+
    "\22\14\5\0\1\14\1\0\1\14\1\0\11\14\1\163"+
    "\10\14\5\0\1\14\1\0\1\14\1\0\1\14\1\164"+
    "\20\14\5\0\1\14\1\0\1\14\1\0\20\14\1\165"+
    "\1\14\5\0\1\14\2\0\1\166\47\0\1\167\30\0"+
    "\1\170\31\0\1\171\25\0\1\151\40\0\1\172\37\0"+
    "\1\173\11\0\1\14\1\0\15\14\1\174\4\14\5\0"+
    "\1\14\1\0\1\14\1\175\22\14\5\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\176\20\14\5\0\1\14\4\0"+
    "\1\177\42\0\1\200\36\0\1\201\26\0\1\202\41\0"+
    "\1\203\10\0\1\14\1\0\1\14\1\204\20\14\5\0"+
    "\1\14\1\0\1\14\1\205\22\14\5\0\1\14\2\0"+
    "\1\206\50\0\1\207\16\0\1\210\46\0\1\211\16\0"+
    "\1\212\27\0\1\14\1\124\22\14\5\0\1\14\4\0"+
    "\1\213\30\0\1\136\34\0\1\214\30\0\1\215\32\0"+
    "\1\153\32\0\1\157\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3348];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\1\1\1\11\10\1\1\11"+
    "\7\1\10\0\5\1\10\0\5\1\10\0\7\1\10\0"+
    "\1\1\1\11\5\1\4\0\1\11\4\0\2\1\1\11"+
    "\2\1\1\11\2\0\1\11\3\0\1\11\2\0\1\11"+
    "\3\1\1\11\5\0\1\1\1\11\1\1\5\0\1\1"+
    "\2\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  public static final int IGNORE = 0;
  public static final int ACCEPT = 1;
  public static final int FURTHERACTION = 2;

  public void pushback(int n) {
    yypushback(n);
  }

  public String match() {
    return yytext();
  }

  private static void reportError(String yytext) {
    try {
      PrintWriter p = new PrintWriter(new OutputStreamWriter(System.err,
                                                "UTF-8"), true);
      p.println("ArabicTreebankLexer.flex tokenization error: \"" + yytext + "\"");
    } catch (UnsupportedEncodingException e) {
      System.err.println("ArabicTreebankLexer.flex tokenization and encoding present error");
    }
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ArabicTreebankLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ArabicTreebankLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { yybegin(DATEINHEADER); return IGNORE;
          }
        case 18: break;
        case 6: 
          { //System.err.println("Transitioning to COMMENT");
                          yybegin(COMMENT); return IGNORE;
          }
        case 19: break;
        case 4: 
          { reportError(yytext());
          }
        case 20: break;
        case 5: 
          { yybegin(YYINITIAL); return IGNORE;
          }
        case 21: break;
        case 2: 
          { return ACCEPT;
          }
        case 22: break;
        case 16: 
          { yybegin(PREAMBLE); return IGNORE;
          }
        case 23: break;
        case 13: 
          { //System.err.println("Transitioning to HEADER");
                          yybegin(HEADER); return IGNORE;
          }
        case 24: break;
        case 9: 
          { //System.err.println("Transitioning to DOCNO");
                          yybegin(DOCNO); return IGNORE;
          }
        case 25: break;
        case 17: 
          { //System.err.println("Transitioning to YYINITIAL");
                  yybegin(YYINITIAL); return IGNORE;
          }
        case 26: break;
        case 11: 
          { //System.err.println("Transitioning to YYINITIAL");
                   yybegin(YYINITIAL); return IGNORE;
          }
        case 27: break;
        case 15: 
          { //System.err.println("Transitioning to DOCTYPE");
                          yybegin(DOCTYPE); return IGNORE;
          }
        case 28: break;
        case 14: 
          { //System.err.println("Transitioning to YYINITIAL");
                yybegin(YYINITIAL); return IGNORE;
          }
        case 29: break;
        case 1: 
          { return FURTHERACTION;
          }
        case 30: break;
        case 3: 
          { return IGNORE;
          }
        case 31: break;
        case 7: 
          { //System.err.println("Transitioning to DATETIME");
                          yybegin(DATETIME); return IGNORE;
          }
        case 32: break;
        case 12: 
          { yybegin(HEADER); return IGNORE;
          }
        case 33: break;
        case 10: 
          { //System.err.println("Transitioning to SRCID");
                          yybegin(SRCID); return IGNORE;
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ArabicTreebankLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ArabicTreebankLexer scanner = null;
        try {
          scanner = new ArabicTreebankLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
