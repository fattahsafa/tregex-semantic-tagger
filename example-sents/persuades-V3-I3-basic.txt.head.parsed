(ROOT
  (S
    (NP (JJ Eurozone) (NNS governments))
    (VP (VBP have)
      (VP (VBN proven)
        (ADJP
          (ADJP (JJ unwilling))
          (, ,)
          (CC or)
          (ADJP (JJ unable)))
        (, ,)
        (S
          (VP (TO to)
            (VP (VB produce)
              (NP
                (NP (DT a) (NN solution))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ persuades)
                      (NP (NNS markets))
                      (SBAR (IN that)
                        (S
                          (NP (PRP they))
                          (VP (VBP are)
                            (PP (IN on)
                              (NP
                                (NP (NN top))
                                (PP (IN of)
                                  (NP (DT the) (NN problem)))))))))))))))))
    (. .)))

amod(governments-2, Eurozone-1)
nsubj(proven-4, governments-2)
xsubj(produce-11, governments-2)
aux(proven-4, have-3)
root(ROOT-0, proven-4)
acomp(proven-4, unwilling-5)
acomp(proven-4, unable-8)
conj_or(unwilling-5, unable-8)
aux(produce-11, to-10)
xcomp(proven-4, produce-11)
det(solution-13, a-12)
dobj(produce-11, solution-13)
nsubj(persuades-15, solution-13)
rcmod(solution-13, persuades-15)
dobj(persuades-15, markets-16)
complm(are-19, that-17)
nsubj(are-19, they-18)
ccomp(persuades-15, are-19)
det(problem-24, the-23)
prep_on_top_of(are-19, problem-24)

(ROOT
  (S (CC But)
    (PP (IN without)
      (S
        (VP (VBG deciding)
          (NP (DT this) (JJ philosophical) (NN issue)))))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (VP (VB ask) (: :)
        (SBARQ
          (WHNP
            (WHNP (WDT what) (NN feature))
            (PP (IN of)
              (NP (PRP$ our) (`` ``) (JJ imagined) (NNS communities) ('' ''))))
          (SQ
            (VP (VBZ persuades)
              (S
                (NP (NNS people))
                (VP (TO to)
                  (VP (VB accept)
                    (SBAR
                      (SBAR (IN that)
                        (S
                          (NP (PRP they))
                          (VP (VBP are)
                            (ADJP (JJ free)
                              (PP (IN under)
                                (NP (DT a) (JJ democratic) (NN regime)))))))
                      (, ,) (RB even)
                      (SBAR
                        (WHADVP (WRB when))
                        (S
                          (NP (PRP$ their) (NN will))
                          (VP (VBZ is)
                            (VP (VBN overridden)
                              (PP (IN on)
                                (NP (JJ important) (NNS issues)))))))))))))
          (. ?))))))

cc(ask-10, But-1)
prepc_without(ask-10, deciding-3)
det(issue-6, this-4)
amod(issue-6, philosophical-5)
dobj(deciding-3, issue-6)
nsubj(ask-10, we-8)
aux(ask-10, can-9)
root(ROOT-0, ask-10)
det(feature-13, what-12)
nsubj(persuades-20, feature-13)
poss(communities-18, our-15)
amod(communities-18, imagined-17)
prep_of(feature-13, communities-18)
parataxis(ask-10, persuades-20)
nsubj(accept-23, people-21)
aux(accept-23, to-22)
xcomp(persuades-20, accept-23)
dep(free-27, that-24)
nsubj(free-27, they-25)
cop(free-27, are-26)
dep(accept-23, free-27)
det(regime-31, a-29)
amod(regime-31, democratic-30)
prep_under(free-27, regime-31)
advmod(free-27, even-33)
advmod(overridden-38, when-34)
poss(will-36, their-35)
nsubjpass(overridden-38, will-36)
auxpass(overridden-38, is-37)
dep(free-27, overridden-38)
amod(issues-41, important-40)
prep_on(overridden-38, issues-41)

